import {Allow, BackendMethod, Remult, remult} from "remult";
import { sendVerificationCode, loginWithCode, loginWithPassword, changePassword, logoutAll } from "../shared/auth/auth.helpers";

export class AuthController {
    @BackendMethod({ allowed: true })
    static async sendCode(email: string, userAgent?: string) {
        console.log('üìß sendCode called with:', { email, userAgent });
        try {
            const result = await sendVerificationCode(email, userAgent);
            console.log('‚úÖ sendCode success:', result);
            return result;
        } catch (error) {
            console.error('‚ùå sendCode error:', error);
            throw error;
        }
    }

    @BackendMethod({ allowed: true })
    static async login(email: string, code?: string, password?: string ) {
        console.log('üîë login called with:', {
            email: email,
            hasCode: !!code,
            hasPassword: !!password
        });

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω –ª–∏–±–æ –∫–æ–¥, –ª–∏–±–æ –ø–∞—Ä–æ–ª—å
            if (!code && !password) {
                throw new Error("Either code or password is required");
            }

            if (code && password) {
                throw new Error("Provide either code or password, not both");
            }

            let result;
            if (code) {
                // –õ–æ–≥–∏–Ω —Å –∫–æ–¥–æ–º –∏–∑ email
                console.log('üîë Logging in with verification code');
                result = await loginWithCode(email, code);
            } else if (password) {
                // –õ–æ–≥–∏–Ω —Å –ø–∞—Ä–æ–ª–µ–º
                console.log('üîê Logging in with password');
                result = await loginWithPassword(email, password);
            }

            console.log('‚úÖ login success');
            return result;
        } catch (error) {
            console.error('‚ùå login error:', error);
            throw error;
        }
    }

    @BackendMethod({ allowed: Allow.authenticated })
    static async changePassword({ newPassword }: { newPassword: string }, rem: Remult) {
        console.log('üîí changePassword called');
        const userId = rem.user?.id;
        if (!userId) {
            console.error('‚ùå changePassword: User not authenticated');
            throw new Error("User not authenticated");
        }
        try {
            const result = await changePassword(userId, newPassword);
            console.log('‚úÖ changePassword success');
            return result;
        } catch (error) {
            console.error('‚ùå changePassword error:', error);
            throw error;
        }
    }

    @BackendMethod({ allowed: Allow.authenticated })
    static async logoutAll() {
        console.log('üö™ logoutAll called');
        const userId = remult.user?.id;
        if (!userId) {
            console.error('‚ùå logoutAll: User not authenticated');
            throw new Error("User not authenticated");
        }
        try {
            const result = await logoutAll(userId);
            console.log('‚úÖ logoutAll success');
            return result;
        } catch (error) {
            console.error('‚ùå logoutAll error:', error);
            throw error;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    @BackendMethod({ allowed: Allow.authenticated })
    static async me(rem: Remult) {
        return {
            user: rem.user,
            authenticated: true
        };
    }
}