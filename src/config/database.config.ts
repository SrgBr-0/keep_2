import { DataSource } from 'typeorm';
import { User } from '../entities/User.entity';
import { VerificationCode } from '../entities/VerificationCode.entity';
import { AuthToken } from '../entities/AuthToken.entity';

export const AppDataSource = new DataSource({
    type: 'postgres',
    url: process.env.DATABASE_URL,
    entities: [User, VerificationCode, AuthToken],
    synchronize: process.env.NODE_ENV === 'development',
    logging: process.env.NODE_ENV === 'development',
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
    schema: 'auth',
    connectTimeoutMS: 60000,
    extra: {
        max: 20, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
        idleTimeoutMillis: 30000,
        connectionTimeoutMillis: 2000,
    }
});

export async function initializeDatabase() {
    try {
        console.log('üîÑ Connecting to database...');
        await AppDataSource.initialize();
        console.log('‚úÖ Database connected successfully');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã
        const queryRunner = AppDataSource.createQueryRunner();
        await queryRunner.connect();

        try {
            // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            await queryRunner.query(`CREATE SCHEMA IF NOT EXISTS auth`);
            console.log('‚úÖ Schema "auth" ready');
        } catch (error) {
            console.warn('‚ö†Ô∏è  Schema creation skipped:', (error as Error).message);
        } finally {
            await queryRunner.release();
        }

    } catch (error) {
        console.error('‚ùå Database connection failed:', error);

        // –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
        if (error instanceof Error) {
            if (error.message.includes('ECONNREFUSED')) {
                console.error('üí° Hint: Make sure PostgreSQL is running on the specified host and port');
            } else if (error.message.includes('password authentication failed')) {
                console.error('üí° Hint: Check your database credentials in .env file');
            } else if (error.message.includes('database') && error.message.includes('does not exist')) {
                console.error('üí° Hint: Create the database first using the provided SQL script');
            }
        }

        process.exit(1);
    }
}